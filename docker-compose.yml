services:
  
  producer:
    build:
      context: .
      dockerfile: Dockerfile-Producer
    environment:
      DOTNET_Kafka__Port: ${KAFKA_PORT}
      DOTNET_Kafka__Host: kafka
      DOTNET_Kafka__Topic: ${KAFKA_TOPIC_NAME}
      DOTNET_Kafka__Serde: ${SERDE_TYPE}
      DOTNET_Kafka__ProductionDelaySec: ${KAFKA_PRODUCTION_DELAY_SEC}
      DOTNET_Kafka__ProductionTimeoutSec: ${KAFKA_PRODUCTION_TIMEOUT_SEC}
    deploy:
      replicas: ${KAFKA_PRODUCERS_COUNT}
    depends_on:
      - kafka
      
  consumer:
    build:
      context: .
      dockerfile: Dockerfile-Consumer
    environment:
      DOTNET_Kafka__Port: ${KAFKA_PORT}
      DOTNET_Kafka__Host: kafka
      DOTNET_Kafka__Topic: ${KAFKA_TOPIC_NAME}
      DOTNET_Kafka__ConsumersCommitEach: ${KAFKA_CONSUMERS_COMMIT_EACH}
      DOTNET_Kafka__Serde: ${SERDE_TYPE}
    deploy:
      replicas: ${KAFKA_PARTITIONS_COUNT}
    depends_on:
      - kafka
  
  zookeeper:
    image: confluentinc/cp-zookeeper:7.3.3
    environment:
      ZOOKEEPER_CLIENT_PORT: ${ZOOKEEPER_PORT}
      ZOOKEEPER_TICK_TIME: 2000

  kafka:
    image: confluentinc/cp-kafka:7.3.3
    ports:
      - ${KAFKA_HOST_PORT}:${KAFKA_HOST_PORT}
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:${ZOOKEEPER_PORT}
      KAFKA_LISTENERS: INTERNAL://kafka:${KAFKA_PORT},EXTERNAL://kafka:${KAFKA_HOST_PORT}
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka:${KAFKA_PORT},EXTERNAL://localhost:${KAFKA_HOST_PORT}
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: false
    depends_on:
      - zookeeper
  
  init-kafka:
    image: confluentinc/cp-kafka:7.3.3
    depends_on:
      - kafka
    entrypoint: [ '/bin/sh', '-c' ]
    command: |
      "
      # blocks until kafka is reachable
      kafka-topics --bootstrap-server kafka:${KAFKA_PORT} --list

      echo 'Adding topics (if not exist)'
      kafka-topics --bootstrap-server kafka:${KAFKA_PORT} --create --if-not-exists --topic ${KAFKA_TOPIC_NAME} --partitions ${KAFKA_PARTITIONS_COUNT} --replication-factor 1

      echo 'There are following topics:'
      kafka-topics --bootstrap-server kafka:${KAFKA_PORT} --list
      kafka-topics --bootstrap-server kafka:${KAFKA_PORT} --describe --topic ${KAFKA_TOPIC_NAME}
      "
      
  kafka_ui:
    image: obsidiandynamics/kafdrop:3.31.0
    ports:
      - ${KAFKA_UI_PORT}:${KAFKA_UI_PORT}
    environment:  
      KAFKA_BROKERCONNECT: kafka:${KAFKA_PORT}
      JVM_OPTS: -Xms32M -Xmx64M
      SERVER_SERVLET_CONTEXTPATH: /
      CMD_ARGS: "--protobufdesc.directory=/var/protobuf_desc"
    volumes:
      - ./Contracts/ProtoEntities:/var/protobuf_desc:ro
    depends_on:
      - kafka